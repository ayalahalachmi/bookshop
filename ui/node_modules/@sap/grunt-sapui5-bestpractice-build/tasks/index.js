'use strict';
var fs = require('fs');
var path = require('path');


// returns the path of the folder that holds the Component.js file relatively to the root folder
//  or '.' if file is under the root folder. The function will return null if file is not found
function getComponentParent(rootPath, curPath) {
    var relativePath = path.relative(rootPath, curPath);
    var baseName = path.basename(curPath);
    if (fs.lstatSync(curPath).isDirectory()) {
        if (baseName === 'node_modules' || baseName === 'dist') {
            return null;//don't look under node_modules and dist folders
        } else {
            var testFilePath = path.join(curPath, 'Component.js')
            if (fs.existsSync(testFilePath)) {
                return relativePath || ".";
            }
            var files = fs.readdirSync(curPath);
            for(var i=0; i < files.length; i++) {
                var file = files[i];
                var componentPath = getComponentParent(rootPath, path.join(curPath, file));
                if (componentPath) {
                    return componentPath;
                }
            }
        }
    }
    return null;
};

module.exports = function(grunt) {

    // checks if the 'Component.js' file is in the root folder
    var componentParentDir = getComponentParent(process.cwd(), process.cwd());
    var bIsComponentUnderRoot = componentParentDir === '.';

    var tmpDir = path.join('dist', 'tmp');
    var preloadSources = [
        '**/*.js',
        '**/changes-bundle.json',
        '**/*.fragment.html',
        '**/*.fragment.json',
        '**/*.fragment.xml',
        '**/*.view.html',
        '**/*.view.json',
        '**/*.view.xml',
        '**/*.properties',
        'manifest.json',
        '!**/node_modules/**',
        '!neo-app.json'
    ];

    var projectRootSources = ['xs-app.json'];

    var dbgSources = ['**/*.js',
        '!**/node_modules/**',
        '!neo-app.json'
    ];

    var rootProjectSources = ['**/*.js',
        '**/*.fragment.html',
        '**/*.fragment.json',
        '**/*.fragment.xml',
        '**/*.view.html',
        '**/*.view.json',
        '**/*.view.xml',
        '!**/node_modules/**',
        '!neo-app.json'
    ];

    function getRootDir(){
        var sRes = '<%= pkg.name %>';
        var sComponentFile = path.join(componentParentDir,'Component.js');
        if (grunt.file.exists(sComponentFile)){
            var fileContent = grunt.file.read(sComponentFile);
            var sReg  = '.extend\\(\\"(.*).';
            var oRegex = new RegExp(sReg + 'Component\\"');
            var aMatches = oRegex.exec(fileContent);
            if (aMatches) {
                sRes = aMatches[1];
                sRes = sRes.replace(/\./g, '/');
            }
        }
        return sRes;
    };


// Creates or updates the resource.json file with the paths of all the files in the project
    var resources = [];
    function createResourceJson(Path){
        var sJsonContent = {};
        var jsonContent;
        createResource(Path);
        sJsonContent.resources = resources;
        jsonContent = JSON.stringify(sJsonContent, null, 4);
        fs.writeFileSync(path.join(Path,"resources.json"), jsonContent);
    }

    var cacheBusterInfoJsonResources = {};
    function createCachebusterInfoJson(Path){
        grunt.log.writeln("starting running createCachebusterInfoJson");
        createSapUICacheBusterInfoJsonResource(Path);
        var jsonCachebusterContent = JSON.stringify(cacheBusterInfoJsonResources, null, 2);
        fs.writeFileSync(path.join(Path,"sap-ui-cachebuster-info.json"), jsonCachebusterContent);
        grunt.log.writeln("finish running createCachebusterInfoJson");
    }

// Adds files to resources array in order to create the sap-ui-cachebuster-info.json file
    function createSapUICacheBusterInfoJsonResource (curPath) {
        var relativePath = path.relative(process.cwd(), curPath);
        if (relativePath.indexOf("dist") >= 0)
            relativePath = path.relative("dist", relativePath);

        var files = fs.readdirSync(curPath);
        for(var i=0; i < files.length; i++){
            var fileName = files[i];
            var newPath = path.join(curPath,fileName);
            if (fs.lstatSync(newPath).isDirectory()) {
                if (fileName != 'dist' && fileName != 'node_modules')
                    createSapUICacheBusterInfoJsonResource(newPath);
            }
            else {
                if (fileName != 'sap-ui-cachebuster-info.json') {
                    var relatetiveFileName = path.normalize (path.join (relativePath, fileName)).replace(new RegExp('\\' + path.sep, 'g'), '/');
                    var fileNameFull = path.normalize (path.join (curPath, fileName));
                    var lastModifiedTime = fs.lstatSync (fileNameFull).mtime.getTime ();
                    cacheBusterInfoJsonResources[relatetiveFileName] = lastModifiedTime;
                }
            }
        }
    };

// Adds files to resources array in order to create / update the resource.json file
    function createResource (curPath) {
        var relativePath = path.relative(process.cwd(), curPath);
        if (relativePath.indexOf("dist") >= 0)
            relativePath = path.relative("dist", relativePath);

        var files = fs.readdirSync(curPath);
        for(var i=0; i < files.length; i++){
            var resource = {};
            var fileName = files[i];
            var sSuffix = path.extname(path.join(curPath, fileName));
            resource.name = path.normalize(path.join(relativePath, fileName));

            if (fileName === "Component-preload.js" || fileName === "resources.json")
                resource.merged = true;

            if (sSuffix === ".properties" && fileName.indexOf("i18n") > -1)
                resource.raw = path.join("i18n","i18n.properties");

            else if (sSuffix === ".properties" && fileName.indexOf("messageBundle") > -1)
                resource.raw = "messageBundle.properties";

            if (resource.raw) {
                var start = fileName.indexOf("_");
                var end = fileName.indexOf(".properties");
                if (start > -1 && end > -1)
                    resource.locale = fileName.substring(start, end);
            }

            if (fileName.indexOf("-dbg") > 0)
                resource.isDebug = true

            var newPath = path.join(curPath,fileName);
            if (fileName != 'dist' && fileName != 'node_modules' && fs.lstatSync(newPath).isDirectory())
                var foundPath = createResource(newPath);
            else
                resources.push(resource);
        }
    };

    grunt.initConfig({

        pkg: grunt.file.readJSON('package.json'),

        dir: {
            appFolder: componentParentDir,
            projectRoot: process.cwd(),
            dist: 'dist',
            root: getRootDir(),
            tmpDir : path.join('dist', 'tmp'),
            tmpDirDbg : path.join('dist', 'tmp-dbg')
        },

        openui5_preload: {
            preloadDbg: {
                options: {
                    resources: {
                        cwd:  '<%= dir.tmpDirDbg %>',
                        src: dbgSources,
                        prefix: '<%= dir.root %>'
                    },
                    compress: false,
                    dest:  '<%= dir.tmpDirDbg %>'
                },
                components: true
            },
            preloadTmp: {
                options: {
                    resources: {
                        cwd: '<%= dir.tmpDir %>',
                        src: preloadSources,
                        prefix: '<%= dir.root %>'
                    },
                    compress: {
                        uglifyjs: {
                            mangle: true,
                            output: {
                                comments: false
                            }
                        }
                    },
                    dest: '<%= dir.tmpDir %>'
                },
                components: true
            },
            preloadRootProject: {
                options: {
                    resources: {
                        cwd:  '<%= dir.appFolder %>',
                        src: rootProjectSources,
                        prefix: '<%= dir.root %>'
                    },
                    compress: {
                        uglifyjs: {
                            output: {
                                comments: false
                            }
                        }
                    },
                    dest:  '<%= dir.appFolder %>'
                },
                components: true
            }
        },

        clean: {
            dist: '<%= dir.dist %>/'
        },

        copy: {
            copyProjectFilesToDist: {
                files: [
                    {
                        expand: true,
                        src: projectRootSources,
                        dest:'<%= dir.dist %>',
                        cwd: '<%= dir.projectRoot %>'
                    }]
            },
            copyToDbg: {
                files: [
                    {
                        expand: true,
                        src: dbgSources,
                        dest: '<%= dir.tmpDirDbg %>',
                        cwd: '<%= dir.appFolder %>',
                        filter: function(filepath) {
                            // prevent js from localService to be copied
                            return !filepath.match(new RegExp('<%= dir.appFolder %>' + '(\\/|\\\\)localService', 'gi'));
                        }
                    },
                    {
                        expand: true,
                        src: '**/*.css',
                        dest: '<%= dir.tmpDirDbg %>',
                        cwd: '<%= dir.appFolder %>'
                    }
                ]
            },
            copyToTmp: {
                files: [
                    {
                        expand: true,
                        src: preloadSources,
                        dest: '<%= dir.tmpDir %>',
                        cwd: '<%= dir.appFolder %>',
                        filter: function(filepath) {
                            // prevent js from localService to be copied
                            return !filepath.match(new RegExp('<%= dir.appFolder %>' + '(\\/|\\\\)localService', 'gi'));
                        }
                    },
                    {
                        expand: true,
                        src: '**/*.css',
                        dest: '<%= dir.tmpDir %>',
                        cwd: '<%= dir.appFolder %>'
                    },
                    {
                        expand: true,
                        src: 'localService/metadata.xml',
                        dest: '<%= dir.tmpDir %>',
                        cwd: '<%= dir.appFolder %>'
                    },
                    {
                        expand: true,
                        src: '**/*',
                        dest: '<%= dir.tmpDir %>',
                        cwd: '<%= dir.appFolder %>',
                        filter: function(filepath) {
                            // prevent js and css files and contents of appFolder from being copied
                            return !filepath.match(new RegExp("(" + componentParentDir + "(\\/|\\\\)${componentParentDir}(\\/|\\\\)localService|\\.css$|\\test.html$)", "gi"));                        }
                    }]
            },
            copyDbgToDist: {
                files: [
                    {
                        expand: true,
                        src: dbgSources,
                        dest:'<%= dir.dist %>',
                        cwd: '<%= dir.tmpDirDbg %>',
                        rename: function(dest, src) {
                            return dest + '/' + src.replace(/((\.view|\.fragment|\.controller)?\.js)/, '-dbg$1');
                        }
                    },
                    {
                        expand: true,
                        src: '**/*.css',
                        dest: '<%= dir.dist %>',
                        cwd: '<%= dir.tmpDirDbg %>',
                        rename: function(dest, src) {
                            return dest + '/' + src.replace('.css', '-dbg.css');
                        }
                    }]
            },
            copyTmpToDist: {
                files: [
                    {
                        expand: true,
                        src: 'Component-preload.js',
                        dest: '<%= dir.dist %>',
                        cwd: '<%= dir.tmpDir %>'
                    },
                    {
                        expand: true,
                        src: '**/*',
                        dest: '<%= dir.dist %>',
                        cwd: '<%= dir.tmpDir %>',
                        filter: function(filepath) {
                            // prevent js and css files and contents of appFolder from being copied
                            return !filepath.match(new RegExp("(" + tmpDir + "(\\/|\\\\)${tmpDir}(\\/|\\\\)localService|\\.css$|\\test.html$)", "gi"));        }
                    }]
            }
        },
        mkdir: {
            dist: {
                options: {
                    create: ['<%= dir.dist %>']
                }
            }
        },
        'cssmin': {
            build: {
                files: [
                    {
                        expand: true,
                        src: '**/*.css',
                        dest: '<%= dir.dist %>',
                        cwd: '<%= dir.appFolder %>'
                    }]
            }
        },
        'uglify': {
            uglifyTmp: {
                files: [
                    {
                        expand: true,
                        src: '**/*.js',
                        dest: '<%= dir.tmpDir %>',
                        cwd: '<%= dir.appFolder %>',
                        filter: function(filepath) {
                            // prevent js from localService to be copied
                            return !filepath.match(new RegExp('<%= dir.appFolder %>' + '(\\/|\\\\)localService', 'gi'));
                        }
                    }]
            },
            uglifyPreload: {
                files: [
                    {
                        expand: true,
                        src: path.join('<%= dir.tmpDir %>', 'Component-preload.js')
                    }]
            },
            uglifyRootPreload: {
                files: [
                    {
                        expand: true,
                        src: path.join('<%= dir.appFolder %>', 'Component-preload.js')
                    }]
            }
        },
        createManifestBundle: {
            options: {
                src: '<%= dir.tmpDir %>',
                dest: '<%= dir.dist %>'
            }
        },
        devxUpdateManifest:{
            options: {
                src: '<%= dir.tmpDir %>',
                dest: '<%= dir.appFolder %>'
            }
        }
    });

    grunt.loadNpmTasks('grunt-contrib-clean');
    grunt.loadNpmTasks('grunt-contrib-copy');
    grunt.loadNpmTasks('grunt-contrib-uglify');
    grunt.loadNpmTasks('grunt-contrib-cssmin');
    grunt.loadNpmTasks('grunt-mkdir');
    grunt.loadNpmTasks('grunt-openui5');

    grunt.registerTask('devx-updateNeoApp', 'Update neo-app for build', function() {
        var bNeoAppExists = grunt.file.exists("neo-app.json");

        if (bNeoAppExists){
            var oNeoAppJsonContent = grunt.file.readJSON("neo-app.json");
            var sSourceFolderRelativePath = "/" + grunt.config.data.dir.appFolder;

            var routes = oNeoAppJsonContent.routes;
            for (var index in routes) {
                //remove source folder from path
                if (routes[index].path.indexOf(sSourceFolderRelativePath) === 0) {
                    routes[index].path = routes[index].path.substring(sSourceFolderRelativePath.length);
                }
            }

            //Remove source folder in welcome file
            var welcomeFile = oNeoAppJsonContent.welcomeFile;
            if (welcomeFile) {
                if (welcomeFile.indexOf(sSourceFolderRelativePath) === 0) {
                    oNeoAppJsonContent.welcomeFile = welcomeFile.substring(sSourceFolderRelativePath.length);
                }
            }
            else{
            }
            var newNeoappFile = path.join(grunt.config.get('dir.dist'), 'neo-app.json');
            grunt.file.write(newNeoappFile, JSON.stringify(oNeoAppJsonContent, null, 2));
        }
        else {
            grunt.log.writeln("no neo-app.json file found");
        }
    });

    grunt.registerTask('cleanTmp', 'Clean temp data created during the build', function() {
        //delete temp and debug dir
        grunt.file.delete(grunt.config.data.dir.tmpDirDbg);
        grunt.file.delete(grunt.config.data.dir.tmpDir);
    });

    grunt.registerTask('createResourcesJson', 'Create Resources.json file', function() {
        if (bIsComponentUnderRoot)
            createResourceJson(process.cwd());
        else
            createResourceJson(path.join(process.cwd(), "dist"));
    });

    grunt.registerTask('createsCachebusterInfoJson', 'Create sap-ui-cachebuster-info.json file', function() {
        if (bIsComponentUnderRoot)
            createCachebusterInfoJson(process.cwd());
        else
            createCachebusterInfoJson(path.join(process.cwd(), "dist"));
    });

// Build task - build will vary according to the location of the component.js file
// If the component.js is under the root - the build will not create a dist folder.
// In any other case - a dist file will be created.
    if(bIsComponentUnderRoot)
        grunt.registerTask('build', ['openui5_preload:preloadRootProject', "uglify:uglifyRootPreload", 'createResourcesJson', 'createsCachebusterInfoJson']);
    else
        grunt.registerTask('build', [
            'bundleChanges',                    // Task to bundle level-0-changes
            "copy:copyToDbg",                   // Copy JS and CSS files to dist/tmp-dbg
            "copy:copyToTmp",                   // Copy all project files to dist/tmp
            'devxUpdateManifest',              // Look for manifest.json file in dist folder. According to deployment mode (ABAP/HCP), update the deployment block Uri. In case of HTML5 repo scenario - update the datasorce.url prefix to contain app.id+version.
            "cssmin",                           // Minify all css files that under the dist folder
            "openui5_preload:preloadTmp",       // Task to merge multiple files into one preload file (Component-preload.js). All the files that defined under preloadSources.
            "copy:copyDbgToDist",               // Copy all JS and CSS files from dist/tmp-dbg to dist folder and add to each file suffix "-dbg"
            "copy:copyProjectFilesToDist",      // Copy all files from project root to dist
            "uglify:uglifyPreload",             // Uglify the "Component-preload.js" file
            "copy:copyTmpToDist",               // Copy all files from dist/tmp folder including the "Component-preload.js" file to dist folder
            'devx-updateNeoApp',                // Update neo-app for build - remove app folder prefix (like: /webapp) from routes and welcome file in the neo-app.json file. At the end copy the new created neo-app.json file to dist folder.
            'createResourcesJson',              // Create resource.json file that contains the paths of all the files in the project
            'createManifestBundle',
            'cleanTmp',                         // Clean dist/tmp and dist/tmp-dbg folders
            'createsCachebusterInfoJson',       // Creates sap-ui-cachebuster-info.json file that contains the name and last modified time of each file under the dist folder
            'cleanupChanges'                    // 0-level changes - Task to delete level-0-changes in dist folder
        ]);
};
