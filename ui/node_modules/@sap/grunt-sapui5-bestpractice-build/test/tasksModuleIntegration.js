const assert = require('assert');
var expect = require('chai').expect;
var path = require('path');
var fs = require('fs');
var endOfLine = require('os').EOL;
var cp = require("child_process");
var rewire = require('rewire');
var through = require('through2');
var unzip = require('unzip');

describe('code validation from grunt', function() {
    var projectDir = path.join(__dirname, "dummy");
    var logFile = path.join(projectDir, "grunt-build-test.log");//file as declare in the grunt file - resultFilePath option
    this.timeout(20000); // A very long environment setup.
    var execProcess;

    before(function () {
    });

    beforeEach(function () {
        console.log("in before each test ");
        if (fs.existsSync(logFile)) {
            console.log("in test - delete results file" + endOfLine);
            fs.unlinkSync(logFile);
        }
    });

    function watchChangingFiles(watchedFolder) {
        fs.watch(watchedFolder, { recursive: true, persistent:false }, (eventType, filename) => {
            if (filename) {
                if (!filename.startsWith('dist') && !filename.startsWith('node_modules') ) {
                    expect.fail(false, true, 'a file has changed in the project source : ' + filename);
                }
            }
        });
    }

    function checkValidationResults(projectFolder) {
        console.log('check linting results contains all validators');
        var lintResults = fs.readFileSync(path.join(projectFolder, "dist", "di.code-validation.core_issues.json"), "utf8");
        var lintResultsJson = JSON.parse(lintResults);
        expect(lintResultsJson.results['@sap/di.code-validation.js']).to.exist;
        expect(lintResultsJson.results['@sap/di.code-validation.xml']).to.exist;
        expect(lintResultsJson.results['@sap/di.code-validation.json']).to.exist;
        console.log('check linting results contains all validators finished');
    }

    function checkManifestBundeleContent(projectFolder) {
        let archive = fs.createReadStream(path.join(projectFolder, 'dist', 'manifest-bundle.zip'));
        return new Promise(function(resolve, reject) {
            archive = archive.pipe(unzip.Parse());
            let entries = {};
            let sManifestJson;
            archive.on('entry', function (entry) {
                entries[entry.path] = {
                    path: entry.path,
                    type: entry.type
                };
                if (entry.path === 'manifest.json') {
                    entry.pipe(through.obj(function (contents) {
                        // contents is a buffer containing the JSON data
                        sManifestJson = contents;
                        //console.log(jsonData);
                    }));
                }
            });

            archive.on('close', function () {
                expect(Object.keys(entries).length).to.equal(2);
                expect(entries).to.have.all.keys('manifest.json', 'i18n/i18n.properties');
                expect(entries['manifest.json'].type).to.equal('File');
                expect(entries['i18n/i18n.properties'].type).to.equal('File');
                resolve();
            });
        });

    }

    function checkManifestContent(sManifest, expectedUri) {
        try {
            var oManifest = JSON.parse(sManifest);
            var dataSourceUri = oManifest["sap.app"].dataSources.mainService.uri;
            expect(dataSourceUri).to.equal(expectedUri);
        }
        catch(err)
        {
            expect(false).to.equal(true, "fail to update manifest.json file");
        }
    }

    function checkComponentPreloadContent(srcComponentJsFilePath, targetComponentPreloadJsFilePath) {
        var sComponentJSContent = fs.readFileSync(srcComponentJsFilePath, "utf8").replace(/\r/gm,'');//remove \r as it is specific for windows 
        var sComponentPreloadJsFilePath = fs.readFileSync(targetComponentPreloadJsFilePath, "utf8");

        expect(sComponentJSContent).to.have.string('sap.ui.define([\n\t', "the test assumes test project has Component.js with specific string");
        expect(sComponentPreloadJsFilePath).not.to.have.string('sap.ui.define([\n\t', "spaces are expected to be removed from compressed component-preload.js file");
        expect(sComponentPreloadJsFilePath).to.have.string('sap.ui.define([', "spaces are expected to be removed from compressed component-preload.js file");

        expect(sComponentJSContent).to.have.string('// set the device model', "the test assumes test project has Component.js with specific string");
        expect(sComponentPreloadJsFilePath).not.to.have.string('// set the device model', "comments are expected to be removed from compressed component-preload.js file");
    }

    function validateResultFilesExists(moduleDistPath, projectFolder) {
        var expectedFiles = [
            path.join(moduleDistPath, "test"),
            path.join(moduleDistPath, "xs-app.json"),
            path.join(moduleDistPath, "Component-preload.js"),
            path.join(moduleDistPath, "manifest-bundle.zip"),
            path.join(moduleDistPath, "sap-ui-cachebuster-info.json"),
            path.join(moduleDistPath, "di.code-validation.core_issues.json"),
            path.join(moduleDistPath, "manifest.json")
        ];
        var unExpectedFiles = [
            path.join(projectFolder, "dist", "tmp"),
            path.join(projectFolder, "dist", "tmp-dbg"),
        ];

        expectedFiles.forEach(function (filePath) {
            expect(fs.existsSync(filePath)).to.be.true;
        });
        unExpectedFiles.forEach(function (filePath) {
            expect(fs.existsSync(filePath)).to.be.false;
        });
    }

    it('check mtaDummy build - manifest.json updated dist contains sources xs-app.json, test', function(done) {
        var projectFolder = path.join(__dirname, "dummy", "mtaDummy", "CrudModule");
        var moduleDistPath = path.join (projectFolder, "dist");
        watchChangingFiles(projectFolder);//watch files to prevent changing the src folder

        execProcess = cp.exec('grunt', {cwd: projectFolder}, function (error, stdout, stderr) {
            if (error) {
                console.error('grunt call error ' + error);
                done(error);
            }
            if (stderr) {
                console.log('grunt stderr: ' + stderr);
            }
            if (stdout) {
                console.log('grunt stdout: ' + stdout);
            }

            var webAppContentStat = fs.lstatSync(projectFolder);
            expect(webAppContentStat.isDirectory()).to.be.true;

            validateResultFilesExists(moduleDistPath, projectFolder);
            checkValidationResults(projectFolder);
            checkComponentPreloadContent(path.join(projectFolder,"webapp", "Component.js"), path.join(moduleDistPath, "Component-preload.js"));

            var sManifestJson = fs.readFileSync (path.join (moduleDistPath, "manifest.json"), "utf8");
            checkManifestContent(sManifestJson, "/Northwind_full_url/V2/Northwind/Northwind.svc/");
            checkManifestBundeleContent(projectFolder).then(function() {
                done();
            });
        });
    });

    it('check mtaDummyRepo build - manifest.json updated dist contains sources xs-app.json, test', function(done) {
        var projectFolder = path.join(__dirname, "dummy", "mtaDummyRepo", "CrudModule");
        var moduleDistPath = path.join (projectFolder, "dist");
        watchChangingFiles(projectFolder);//watch files to prevent changing the src folder

        execProcess = cp.exec('grunt', {cwd: projectFolder}, function (error, stdout, stderr) {
            if (error) {
                console.error('grunt call error ' + error);
                done(error);
            }
            if (stderr) {
                console.log('grunt stderr: ' + stderr);
            }
            if (stdout) {
                console.log('grunt stdout: ' + stdout);
            }

            var webAppContentStat = fs.lstatSync(projectFolder);
            expect(webAppContentStat.isDirectory()).to.be.true;

            validateResultFilesExists(moduleDistPath, projectFolder);
            checkValidationResults(projectFolder);
            checkComponentPreloadContent(path.join(projectFolder,"webapp", "Component.js"), path.join(moduleDistPath, "Component-preload.js"));

            var sManifestJson = fs.readFileSync (path.join (moduleDistPath, "manifest.json"), "utf8");
            checkManifestContent(sManifestJson, "Northwind_full_url/V2/Northwind/Northwind.svc/");
            checkManifestBundeleContent(projectFolder).then(function() {
                done();
            });
        });
    });


    after(function () {
    });

    afterEach(function () {
        //process.kill(execProcess);
    });
});