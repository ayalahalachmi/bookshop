const assert = require('assert');
var expect = require('chai').expect;
var path = require('path');
var fs = require('fs');
var endOfLine = require('os').EOL;
var cp = require("child_process");
var rewire = require('rewire');
var through = require('through2');
var unzip = require('unzip');

describe('code validation from grunt', function() {
    var projectDir = path.join(__dirname, "dummy");
    var logFile = path.join(projectDir, "grunt-build-test.log");//file as declare in the grunt file - resultFilePath option
    this.timeout(20000); // A very long environment setup.
    var execProcess;

    before(function () {
    });

    beforeEach(function () {
        console.log("in before each test ");
        if (fs.existsSync(logFile)) {
            console.log("in test - delete results file" + endOfLine);
            fs.unlinkSync(logFile);
        }
    });

    function watchChangingFiles(watchedFolder) {
        fs.watch(watchedFolder, { recursive: true, persistent:false }, (eventType, filename) => {
            if (filename) {
                if (!filename.startsWith('dist') && !filename.startsWith('node_modules') ) {
                    expect.fail(false, true, 'a file has changed in the project source : ' + filename);
                }
            }
        });
    }

    function checkCachebuster(projectFolder) {
        console.log('checking generated sap-ui-cachebuster-info.json file .');
        var bSapUI5CachebusterInfoOK = true;
        var sCachebuster;
        var oCachebuster, oExpectedCachebuster;
        try {
            sCachebuster = fs.readFileSync(path.join(projectFolder, "dist", "sap-ui-cachebuster-info.json"), "utf8");
            expect(sCachebuster).to.exists;
        }
        catch (err) {
            bSapUI5CachebusterInfoOK = false;
            assert.isFalse(bSapUI5CachebusterInfoOK, 'fail to find/read file: sap-ui5-Cachebuster-info.json.');
        }
        var sExpectedCachebuster;
        if (bSapUI5CachebusterInfoOK) {
            try {
                sExpectedCachebuster = fs.readFileSync(path.join(__dirname, "dummy", "ExpectedFiles", "webappNewStructure", "sap-ui-cachebuster-info.json"), "utf8");
                expect(sExpectedCachebuster).to.exists;
            }
            catch (err) {
                bSapUI5CachebusterInfoOK = false;
                assert.isFalse(bSapUI5CachebusterInfoOK, 'fail to find/read file: sap-ui5-Cachebuster-info.json in expected diretory');
            }
            if (bSapUI5CachebusterInfoOK) {
                console.log('checking sap-ui-cachebuster-info.json file found');
                try {
                    oCachebuster = JSON.parse(sCachebuster);
                    oExpectedCachebuster = JSON.parse(sExpectedCachebuster);
                }
                catch (err) {
                    bSapUI5CachebusterInfoOK = false;
                    assert.isFalse(bSapUI5CachebusterInfoOK, 'fail to parse as sap-ui5-Cachebuster-info.json as json file.');
                }
                if (bSapUI5CachebusterInfoOK) {
                    var keysExpected = Object.keys(oExpectedCachebuster);
                    //console.log("cache buster file content: " + sCachebuster);
                    //console.log("expected cache buster file keys: " + sExpectedCachebuster);
                    expect(oCachebuster).to.have.all.keys(keysExpected);
                    console.log('check of sap-ui-cachebuster-info.json finished successfuly');
                }
            }
        }
    }

    function checkComponentPreload(projectFolder) {
        var componentsPreload = fs.readFileSync(path.join(projectFolder, "dist", "Component-preload.js"), "utf8");
        expect(componentsPreload).to.exists;
        var expectedCompPreload = fs.readFileSync(path.join(__dirname, "dummy", "ExpectedFiles", "webappNewStructure", "Component-preload.js"), "utf8");
        //expect(componentsPreload).to.equal(expectedCompPreload);
        var expectedNeoapp = fs.readFileSync(path.join(__dirname, "dummy", "ExpectedFiles", "webappNewStructure", "neo-app.json"), "utf8");
        var neoapp = fs.readFileSync(path.join(projectFolder, "dist", "neo-app.json"), "utf8");
        //expect(neoapp).to.equal(expectedNeoapp);
    }

    function checkValidationResults(projectFolder) {
        console.log('check linting results contains all validators');
        var lintResults = fs.readFileSync(path.join(projectFolder, "dist", "di.code-validation.core_issues.json"), "utf8");
        var lintResultsJson = JSON.parse(lintResults);
        expect(lintResultsJson.results['@sap/di.code-validation.js']).to.exist;
        expect(lintResultsJson.results['@sap/di.code-validation.xml']).to.exist;
        expect(lintResultsJson.results['@sap/di.code-validation.json']).to.exist;
        console.log('check linting results contains all validators finished');
    }

    it('check webapp build', function(done) {
        console.log("check webapp build test - starting ");
        var projectFolder = path.join(__dirname, "dummy", "webappNewStructure");
        watchChangingFiles(projectFolder);

        execProcess = cp.exec('grunt', {cwd: path.join(__dirname, "dummy", "webappNewStructure")}, function (error, stdout, stderr) {
            if (error) {
                console.error('grunt call error ' + error);
                done(error);
            }
            if (stderr) {
                console.log('grunt stderr: ' + stderr);
            }
            if (stdout) {
                console.log('grunt stdout: ' + stdout);
            }

            var webAppContentStat = fs.lstatSync(projectFolder);
            expect(webAppContentStat.isDirectory()).to.be.true;
            var distStat = fs.lstatSync(path.join(projectFolder, "dist"));
            expect(distStat.isDirectory()).to.be.true;
            expect(fs.existsSync(path.join(projectFolder, "dist", "tmp"))).to.be.false;

            checkComponentPreload(projectFolder);
            checkCachebuster(projectFolder);
            checkValidationResults(projectFolder);

            console.log("check webapp build test - ending ");
            done();
        });
    });

    after(function () {
    });

    afterEach(function () {
        //process.kill(execProcess);
    });
});