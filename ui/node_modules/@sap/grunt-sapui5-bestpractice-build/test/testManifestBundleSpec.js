"use strict";

let assert = require('assert');
let expect = require('chai').expect;
let path = require('path');
let fs = require('fs');
let unzip = require('unzip');
let grunt = require('grunt');
let rewire = require('rewire');
let openui5_UIManifestBundlePrivate = rewire('../tasks/openui5_ManifestBundle');

describe('create manifest-bundle.zip for webapp project ', function () {

    let manifestBundleFunction = openui5_UIManifestBundlePrivate.__get__('createManifestBundle');

    let basePath = path.join(__dirname, 'dummy');
    let projectName = 'manifestBundleStructure';

    it('create manifest-bundle.zip (manifest.json exists)', (done) => {
        grunt.config.init({
            dir: {
                appFolder: path.join(basePath, projectName, 'webapp'),
                dist: path.join(basePath, projectName, 'dist'),
                tmpDir: path.join(basePath, projectName, 'dist', 'tmp')
            },
            createManifestBundle: {
                options: {
                    src: '<%= dir.appFolder %>',
                    dest: '<%= dir.tmpDir %>'
                }
            }
        });
        var dist = path.join(basePath, projectName, 'dist');
        var appFolder = path.join(basePath, projectName, 'webapp');
        manifestBundleFunction(appFolder, dist).then(function() {
            expect(fs.existsSync(path.join(basePath, projectName, 'dist'))).to.be.true;
            expect(fs.existsSync(path.join(basePath, projectName, 'dist', 'manifest-bundle.zip'))).to.be.true;
            return new Promise(function(resolve, reject) {
                let archive = fs.createReadStream(path.join(basePath, projectName, 'dist', 'manifest-bundle.zip'));
                archive = archive.pipe(unzip.Parse());
                let entries = {};
                archive.on('entry', function (entry) {
                    entries[entry.path] = {
                        path: entry.path,
                        type: entry.type
                    };
                });
                archive.on('close', function() {
                    expect(Object.keys(entries).length).to.equal(2);
                    expect(entries).to.have.all.keys('manifest.json', 'i18n/i18n.properties');
                    expect(entries['manifest.json'].type).to.equal('File');
                    expect(entries['i18n/i18n.properties'].type).to.equal('File');
                    resolve();
                });
            });
        }).catch((err) => {
            console.error(err);
            expect(false).to.be.true; // manually produce an issue here!
        }).then(done);
    });

    it('create manifest-bundle.zip (grunt not configured)', (done) => {
        grunt.config.init({});
        manifestBundleFunction(grunt).then(() => {
            expect(fs.existsSync(path.join(basePath, projectName, 'dist'))).to.be.false;
            expect(fs.existsSync(path.join(basePath, projectName, 'dist', 'manifest-bundle.zip'))).to.be.false;
        }).catch((err) => {
            console.error(err);
            expect(false).to.be.true; // manually produce an issue here!
        }).then(done);
    });

    afterEach(() => {
        let manifestBundle = path.join(basePath, projectName, 'dist', 'manifest-bundle.zip');
        if (fs.existsSync(manifestBundle)) {
            fs.unlinkSync(manifestBundle);
        }
        let distFolder = path.join(basePath, projectName, 'dist');
        if (fs.existsSync(distFolder)) {
            fs.rmdirSync(distFolder);
        }
    });

});