var expect = require('chai').expect;
var path = require('path');
var grunt = require('grunt');
var lint = require('../tasks/lint');
var sinon = require('sinon');
var mock = require('mock-fs');
var xmlValidator = require('@sap/di.code-validation.xml');
var jsValidator = require('@sap/di.code-validation.js');
var jsonValidator = require('@sap/di.code-validation.json');
var sandbox = sinon.sandbox.create();
var rewire = require('rewire');
var lintPrivate = rewire('../tasks/lint');
var Q = require('q');

describe('lint task', function () {
    var lint_xmlFunction = lintPrivate.__get__('lint_xml');
    var lint_jsFunction = lintPrivate.__get__('lint_js');
    var lint_jsonFunction = lintPrivate.__get__('lint_json');

    function initGruntConfig(projectName, appFolder) {
        grunt.initConfig({
            dir: {
                appFolder: path.join(__dirname, 'dummy', projectName, appFolder),
                dist: path.join(__dirname, 'dummy', projectName, 'dist'),
                tmpDir: path.join(__dirname, 'dummy', projectName, 'dist', 'tmp')
            }
        });
    }

    beforeEach(function () {
        initGruntConfig("lreport", "webapp");
        mock({
                'test/dummy/lreport': {
                    'node_modules': {},
                    'webapp': {
                        'file.xml': "<a",
                        'file.js': "",
                        'file.json': ""
                    }
                }
            }
        );
        sandbox.stub(grunt.log, "error").callsFake(function (msg) {
            //console.log(msg);
        });
        sandbox.stub(grunt.log, "writeln").callsFake(function (msg) {
            //console.log(msg);
        });
        sandbox.stub(console, "log").callsFake(function (msg) {
            //console.log(msg);
        });
        lint(grunt);
    });

    it('validation task failure', function (done) {
        sandbox.stub(xmlValidator, 'validateFiles').callsFake(function () {
            grunt.log.writeln('in test stub for xmlvalidator');
            throw new Error('test throws exception');
        });
        sandbox.stub(jsValidator, 'validateFiles').callsFake(function () {
            grunt.log.writeln('in test stub for jsvalidator');
            throw new Error('test throws exception');
        });
        sandbox.stub(jsonValidator, 'validateFiles').callsFake(function () {
            grunt.log.writeln('in test stub for jsonvalidator');
            var deferred = Q.defer();
            deferred.reject(new Error('test throws exception'));
            return deferred.promise;
        });
        var results = {};
        expect(lint_xmlFunction(grunt, results)).to.equal(false);
        expect(lint_jsFunction(grunt, results)).to.equal(false);
        lint_jsonFunction(grunt, results, function (success) {
            expect(success).to.be.false;
            done();
        });
    });

    it('validation task pass', function (done) {
        sandbox.stub(xmlValidator, 'validateFiles').callsFake(function () {
            console.log('in test stub for xmlvalidator');
            return [];
        });
        sandbox.stub(jsValidator, 'validateFiles').callsFake(function () {
            console.log('in test stub for xmlvalidator');
            return [];
        });
        sandbox.stub(jsonValidator, 'validateFiles').callsFake(function () {
            grunt.log.writeln('in test stub for jsonvalidator');
            var deferred = Q.defer();
            deferred.resolve([]);
            return deferred.promise;
        });
        var results = {};
        expect(lint_xmlFunction(grunt, results)).to.equal(true);
        expect(lint_jsFunction(grunt, results)).to.equal(true);
        lint_jsonFunction(grunt, results, function (success) {
            expect(success).to.be.undefined;//grunt return value is undefined in case of success.
            done();
        });
        expect(results['@sap/di.code-validation.xml']).to.exist;
    });

    afterEach(function () {
        sandbox.restore();
        mock.restore();
    });

});