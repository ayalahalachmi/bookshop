var expect = require('chai').expect;
var path = require('path');
var grunt = require('grunt');
var rewire = require('rewire');
var updateManifestJson = rewire('../tasks/updateManifestJson.js');
var sinon = require('sinon');
var sandbox = sinon.sandbox.create();

function initGruntConfig(projectName, appFolder) {
    grunt.initConfig({
        dir: {
            appFolder: path.join(__dirname, 'dummy', projectName, appFolder),
            tmpDir: path.join(__dirname, 'dummy', projectName),
        }
    });
}

function initGruntConfigRepo(projectName, appFolder) {
    grunt.initConfig({
        dir: {
            appFolder: path.join(__dirname, 'dummy', projectName, appFolder),
            tmpDir: path.join(__dirname, 'dummy', projectName),
        },
        deploy_mode: "html_repo"
    });
}

describe('Update Manifest task test', function () {
    let updateManifestDeploymentBlockUri = updateManifestJson.__get__('updateManifestDeploymentBlockUri');
    let updateManifestDatasourceUri = updateManifestJson.__get__('updateManifestDatasourceUri');
    let updateManifestFunction = updateManifestJson.__get__('updateManifestFile');

    afterEach(function(){
        sandbox.restore();
    });

    it('Test updateManifestFile when project nonHCP - manifest.json is not changed', function () {
        initGruntConfig(path.join('updateManifestTestFiles', 'nonHCP'), 'webapp');
        updateManifestJson.__set__('updateManifestDeploymentBlockUri', sinon.spy());
        updateManifestFunction(grunt, grunt.config.data.dir.appFolder, grunt.config.data.dir.tmpDir);
        expect(updateManifestJson.__get__('updateManifestDeploymentBlockUri').called).to.be.false;
    });

    it('Test updateManifestFile when project is HCP - updateManifestDeploymentBlockUri is called', function () {
        initGruntConfig(path.join('updateManifestTestFiles', 'HCP'), 'webapp');
        updateManifestJson.__set__('updateManifestDeploymentBlockUri', sinon.spy());
        updateManifestFunction(grunt, grunt.config.data.dir.appFolder, grunt.config.data.dir.tmpDir);
        expect(updateManifestJson.__get__('updateManifestDeploymentBlockUri').called).to.be.true;
    });

    it('Test updateManifestFile repo scenario - updateManifestDatasourceUri is called', function () {
        initGruntConfigRepo(path.join('updateManifestTestFiles', 'nonHCP'), 'webapp');
        updateManifestJson.__set__('updateManifestDatasourceUri', sinon.spy());
        updateManifestFunction(grunt, grunt.config.data.dir.appFolder, grunt.config.data.dir.tmpDir);
        expect(updateManifestJson.__get__('updateManifestDatasourceUri').called).to.be.true;
    });

    it('Test updateManifestDatasourceUri when HCP project - update HCP property in manifest.json', function () {
        initGruntConfig(path.join('updateManifestTestFiles', 'noManifest'), 'webapp');
        let manifestFile = {'sap.platform.hcp':{'uri':'/a/b/c/webapp/'}};
        updateManifestDeploymentBlockUri(manifestFile['sap.platform.hcp'], 'webapp');
        expect(manifestFile['sap.platform.hcp']['uri']).to.equal('/a/b/c/');
    })

    it('Test updateManifestDatasourceUri when ABAP project - update ABAP property in manifest.json', function () {
        initGruntConfig(path.join('updateManifestTestFiles', 'noManifest'), 'webapp');
        let manifestFile = {'sap.platform.abap':{'uri':'/a/b/c/webapp/'}};
        updateManifestDeploymentBlockUri(manifestFile['sap.platform.abap'], 'webapp');
        expect(manifestFile['sap.platform.abap']['uri']).to.equal('/a/b/c/');
    })

    it('Test updateManifestDatasourceUri when MTA repo scenario not relative URL - update manifest.json - remove preceding / in uri', function () {
        let manifestFile = {'sap.app':{'id': 'FioriFullURL','dataSources':{'mainService':{'uri':'/Northwind_full_url/V2/Northwind/Northwind.svc/'}},'applicationVersion':{'version': '1.0.0'}}};
        updateManifestDatasourceUri(manifestFile['sap.app'], 'webapp');
        expect(manifestFile['sap.app']['dataSources']['mainService']['uri']).to.equal('Northwind_full_url/V2/Northwind/Northwind.svc/');
    })

    it('Test updateManifestDatasourceUri when MTA repo scenario not relative URL with annotations - update manifest.json - remove preceding / in uri', function () {
        let manifestFile = {'sap.app':{"id":"FioriFullURL","dataSources":{"mainService":{"uri":"/Northwind_full_url/V2/Northwind/Northwind.svc/"},
                    "SEPMRA_PROD_MAN_ANNO_MDL":{"uri":"/QH3_815/sap/opu/odata/IWFND/CATALOGSERVICE;v=2/Annotations"},
                    "SEPMRA_PROD_MAN_ANNO_MDL2":{"uri":"/QH3_815/sap/opu/odata/IWFND/CATALOGSERVICE;v=2/Annotations"},
                    "localAnnotations": {"uri": "annotations/annotations.xml"}},"applicationVersion":{"version": "1.0.0"}}};
        updateManifestDatasourceUri(manifestFile['sap.app'], 'webapp');
        expect(manifestFile['sap.app']['dataSources']['mainService']['uri']).to.equal('Northwind_full_url/V2/Northwind/Northwind.svc/');
        expect(manifestFile['sap.app']['dataSources']['SEPMRA_PROD_MAN_ANNO_MDL']['uri']).to.equal('QH3_815/sap/opu/odata/IWFND/CATALOGSERVICE;v=2/Annotations');
        expect(manifestFile['sap.app']['dataSources']['SEPMRA_PROD_MAN_ANNO_MDL2']['uri']).to.equal('QH3_815/sap/opu/odata/IWFND/CATALOGSERVICE;v=2/Annotations');
        expect(manifestFile['sap.app']['dataSources']['localAnnotations']['uri']).to.equal('annotations/annotations.xml');
    })

    it('Test updateManifestDatasourceUri when MTA repo scenario relative URL - no update to manifest.json', function () {
        let manifestFile = {'sap.app':{'id': 'FioriFullURL','dataSources':{'mainService':{'uri':'Northwind_full_url/V2/Northwind/Northwind.svc/'}},'applicationVersion':{'version': '1.0.0'}}};
        updateManifestDatasourceUri(manifestFile['sap.app']);
        expect(manifestFile['sap.app']['dataSources']['mainService']['uri']).to.equal('Northwind_full_url/V2/Northwind/Northwind.svc/');
    })

    it('Test updateManifestFile when manifest.json doesnt exist - throw error', function () {
        initGruntConfig(path.join('updateManifestTestFiles', 'noManifest'), 'webapp');
        let failingFunction = function(){
            updateManifestFunction(grunt, grunt.config.data.dir.appFolder, grunt.config.data.dir.tmpDir);
        };
        expect(failingFunction).to.throw('devxUpdateManifest - no manifest.json file found in project');
    });

    it('Test updateManifestFile when manifest file has inccorect structure (no uri) - throw error', function () {
        let manifestFile = {'sap.app':{'id': 'FioriFullURL','dataSources':{'mainService':{}},'applicationVersion':{'version': '1.0.0'}}};
        let failingFunction = function(){
            updateManifestDatasourceUri(manifestFile['sap.app']);
        };
        expect(failingFunction).to.throw('devxUpdateManifest - Incorrect manifest.json structure, uri undefined for datasource');
    })

    it('Test updateManifestFile when manifest file has inccorect structure (no id) - throw error', function () {
        let manifestFile = {'sap.app':{'dataSources':{'mainService':{'uri':'Northwind_full_url/V2/Northwind/Northwind.svc/'}},'applicationVersion':{'version': '1.0.0'}}};
        let failingFunction = function(){
            updateManifestDatasourceUri(manifestFile['sap.app']);
        };
        expect(failingFunction).to.throw('devxUpdateManifest - Incorrect manifest.json structure, id undefined');
    })

    it('Test updateManifestFile when manifest file has inccorect structure (no applicationVersion) - throw error', function () {
        let manifestFile = {'sap.app':{'id': 'FioriFullURL', 'dataSources':{'mainService':{'uri':'Northwind_full_url/V2/Northwind/Northwind.svc/'}}}};
        let failingFunction = function(){
            updateManifestDatasourceUri(manifestFile['sap.app']);
        };
        expect(failingFunction).to.throw('devxUpdateManifest - Incorrect manifest.json structure, applicationVersion undefined');
    })

    it('Test updateManifestFile when manifest file has inccorect structure (no dataSources) - throw error', function () {
        let manifestFile = {'sap.app':{'id': 'FioriFullURL','applicationVersion':{'version': '1.0.0'}}};
        let failingFunction = function(){
            updateManifestDatasourceUri(manifestFile['sap.app']);
        };
        expect(failingFunction).to.throw('devxUpdateManifest - Incorrect manifest.json structure, dataSources undefined');
    })

    it('Test updateManifestFile when manifest file has inccorect structure (no version) - throw error', function () {
        let manifestFile = {'sap.app':{'id': 'FioriFullURL','dataSources':{'mainService':{'uri':'Northwind_full_url/V2/Northwind/Northwind.svc/'}},'applicationVersion':{}}};
        let failingFunction = function(){
            updateManifestDatasourceUri(manifestFile['sap.app']);
        };
        expect(failingFunction).to.throw('devxUpdateManifest - Incorrect manifest.json structure, applicationVersion.version undefined');
    })

    it('Test updateManifestFile when invalid json content - throw error', function () {
        initGruntConfig(path.join('updateManifestTestFiles', 'badJson'), 'webapp');
        try{
            updateManifestFunction(grunt, grunt.config.data.dir.appFolder, grunt.config.data.dir.tmpDir);
        } catch(err){
            expect(err.message).to.contain('Unable to parse');
        }
    })
});
